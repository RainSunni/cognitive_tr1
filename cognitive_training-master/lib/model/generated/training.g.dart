//This is autogenerated file. All changes will be lost after code generation.
import 'package:nsg_data/nsg_data.dart';
// ignore: unused_import
import 'dart:typed_data';
import '../data_controller_model.dart';

/// Тренировка
class TrainingGenerated extends NsgDataItem {
  static const nameId = 'id';
  static const nameDateEdited = 'dateEdited';
  static const nameName = 'name';
  static const nameComment = 'comment';
  static const nameColorsId = 'colorsId';
  static const nameDate = 'date';
  static const nameMathId = 'mathId';
  static const nameMetronomId = 'metronomId';
  static const nameDurationSeconds = 'durationSeconds';
  static const nameDurationMinutes = 'durationMinutes';
  static const nameUseDurationMinutes = 'useDurationMinutes';
  static const nameAudioCountdownToStart = 'audioCountdownToStart';
  static const nameBeeperInterval = 'beeperInterval';
  static const nameAudioCountdownToFinish = 'audioCountdownToFinish';
  static const nameTaskDelayTime = 'taskDelayTime';
  static const nameUserId = 'userId';
  static const nameIsPublic = 'isPublic';
  static const nameRelaxTime = 'relaxTime';

  static final Map<String, String> fieldNameDict = {
    nameColorsId: 'Colors id',
    nameMathId: 'Math id',
    nameMetronomId: 'Metronom id',
  };

  @override
  String get typeName => 'Training';

  @override
  bool get isDistributed => true;

  @override
  void initialize() {
    addField(NsgDataStringField(nameId), primaryKey: true);
    addField(NsgDataDateField(nameDateEdited), primaryKey: false);
    addField(NsgDataStringField(nameName), primaryKey: false);
    addField(NsgDataStringField(nameComment, maxLength: 0), primaryKey: false);
    addField(NsgDataReferenceField<TrainingColors>(nameColorsId), primaryKey: false);
    addField(NsgDataDateField(nameDate), primaryKey: false);
    addField(NsgDataReferenceField<TrainingMath>(nameMathId), primaryKey: false);
    addField(NsgDataReferenceField<TrainingMetronom>(nameMetronomId), primaryKey: false);
    addField(NsgDataIntField(nameDurationSeconds), primaryKey: false);
    addField(NsgDataIntField(nameDurationMinutes), primaryKey: false);
    addField(NsgDataBoolField(nameUseDurationMinutes), primaryKey: false);
    addField(NsgDataIntField(nameAudioCountdownToStart), primaryKey: false);
    addField(NsgDataIntField(nameBeeperInterval), primaryKey: false);
    addField(NsgDataIntField(nameAudioCountdownToFinish), primaryKey: false);
    addField(NsgDataIntField(nameTaskDelayTime), primaryKey: false);
    addField(NsgDataStringField(nameUserId), primaryKey: false);
    addField(NsgDataBoolField(nameIsPublic), primaryKey: false);
    addField(NsgDataIntField(nameRelaxTime), primaryKey: false);
    fieldList.fields[nameColorsId]?.presentation = 'Colors id';
    fieldList.fields[nameMathId]?.presentation = 'Math id';
    fieldList.fields[nameMetronomId]?.presentation = 'Metronom id';
  }

  @override
  String toString() => name;

  @override
  NsgDataItem getNewObject() => Training();

  /// Идентификатор
  @override
  String get id => getFieldValue(nameId).toString();

  @override
  set id(String value) => setFieldValue(nameId, value);

  /// ДатаПоследнегоИзменения
  DateTime get dateEdited => getFieldValue(nameDateEdited) as DateTime;

  set dateEdited(DateTime value) => setFieldValue(nameDateEdited, value);

  /// Имя
  String get name => getFieldValue(nameName).toString();

  set name(String value) => setFieldValue(nameName, value);

  /// Комментарий
  String get comment => getFieldValue(nameComment).toString();

  set comment(String value) => setFieldValue(nameComment, value);

  /// ЦветовоеУпражнение
  String get colorsId => getFieldValue(nameColorsId).toString();
  TrainingColors get colors => getReferent<TrainingColors>(nameColorsId);
  Future<TrainingColors> colorsAsync() async {
   return await getReferentAsync<TrainingColors>(nameColorsId);
  }

  set colorsId(String value) => setFieldValue(nameColorsId, value);
  set colors(TrainingColors value) =>
    setFieldValue(nameColorsId, value.id);

  /// Дата
  DateTime get date => getFieldValue(nameDate) as DateTime;

  set date(DateTime value) => setFieldValue(nameDate, value);

  /// МатематическоеУпражнение
  String get mathId => getFieldValue(nameMathId).toString();
  TrainingMath get math => getReferent<TrainingMath>(nameMathId);
  Future<TrainingMath> mathAsync() async {
   return await getReferentAsync<TrainingMath>(nameMathId);
  }

  set mathId(String value) => setFieldValue(nameMathId, value);
  set math(TrainingMath value) =>
    setFieldValue(nameMathId, value.id);

  /// УпражнениеСМетрономом
  String get metronomId => getFieldValue(nameMetronomId).toString();
  TrainingMetronom get metronom => getReferent<TrainingMetronom>(nameMetronomId);
  Future<TrainingMetronom> metronomAsync() async {
   return await getReferentAsync<TrainingMetronom>(nameMetronomId);
  }

  set metronomId(String value) => setFieldValue(nameMetronomId, value);
  set metronom(TrainingMetronom value) =>
    setFieldValue(nameMetronomId, value.id);

  /// ПродолжительностьВСекундах
  int get durationSeconds => getFieldValue(nameDurationSeconds) as int;

  set durationSeconds(int value) => setFieldValue(nameDurationSeconds, value);

  /// ПродолжительностьВМинутах
  int get durationMinutes => getFieldValue(nameDurationMinutes) as int;

  set durationMinutes(int value) => setFieldValue(nameDurationMinutes, value);

  /// СчитатьПродолжительностьВМинутах
  bool get useDurationMinutes => getFieldValue(nameUseDurationMinutes) as bool;

  set useDurationMinutes(bool value) => setFieldValue(nameUseDurationMinutes, value);

  /// ЗвуковойОбратныйОтсчетНачала
  int get audioCountdownToStart => getFieldValue(nameAudioCountdownToStart) as int;

  set audioCountdownToStart(int value) => setFieldValue(nameAudioCountdownToStart, value);

  /// ИнтервалБипера
  int get beeperInterval => getFieldValue(nameBeeperInterval) as int;

  set beeperInterval(int value) => setFieldValue(nameBeeperInterval, value);

  /// ЗвуковойОбратныйОтсчетОкончания
  int get audioCountdownToFinish => getFieldValue(nameAudioCountdownToFinish) as int;

  set audioCountdownToFinish(int value) => setFieldValue(nameAudioCountdownToFinish, value);

  /// ВремяОжидания
  int get taskDelayTime => getFieldValue(nameTaskDelayTime) as int;

  set taskDelayTime(int value) => setFieldValue(nameTaskDelayTime, value);

  /// Пользователь
  String get userId => getFieldValue(nameUserId).toString();

  set userId(String value) => setFieldValue(nameUserId, value);

  /// ОбщийДоступ
  bool get isPublic => getFieldValue(nameIsPublic) as bool;

  set isPublic(bool value) => setFieldValue(nameIsPublic, value);

  /// Время ожидания после окончания упражнения, сек
  int get relaxTime => getFieldValue(nameRelaxTime) as int;

  set relaxTime(int value) => setFieldValue(nameRelaxTime, value);

  @override
  String get apiRequestItems {
    return '/Api/Training';
  }
}
